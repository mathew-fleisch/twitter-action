# Name:        tag-release.yaml
# Author:      Mathew Fleisch <mathew.fleisch@gmail.com>
# Description: This action will build a docker container that generates a go-binary
#              as a build artifact. The go-binary is uploaded as a release asset,
#              and the docker container is pushed to docker hub, when triggered by
#              pushing a new git tag (that starts with the letter 'v').
name: Release twitter-action
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Release twitter-action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Release twitter-action"
        env:
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
          REGISTRY_APPNAME: ${{ secrets.REGISTRY_APPNAME }}
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          echo "This action will build a docker container that generates a go-binary as a build artifact. The go-binary is uploaded as a release asset, and the docker container is pushed to docker hub, when triggered by pushing a new git tag (that starts with the letter 'v')."
          echo "Check environment variables are set..."
          expected="REGISTRY_USERNAME REGISTRY_PASSWORD REGISTRY_URL REGISTRY_APPNAME GIT_TOKEN"
          for expect in $expected; do
            if [[ -z "${!expect}" ]]; then
              echo "Missing Github Secret: $expect"
              echo "See read-me about automation to set this up in your fork"
              exit 1
            fi
          done
          # Fetch all tags and set most recent as a variable
          git fetch --prune --unshallow
          tag=$(git describe --tags)
          # Get commit message for selected tag
          commit_message="$(git for-each-ref refs/tags/$tag --format='%(contents)' | head -n1)"
          # Expected go-binary filename
          go_binary_filename="./twitter-action"
          # Container registry credentials stored as environment variables from github secrets
          # Build Dockerfile and use git tag as docker tag
          echo "Build docker container"
          docker build -t twitter-action-local .
          # Copy go-binary build artifact from the docker build
          container_id=$(docker create twitter-action-local:latest)
          docker cp $container_id:/usr/bin/twitter-action $go_binary_filename
          # Create a release, if the go-binary was copied from the docker build
          if [[ -f "$go_binary_filename" ]]; then
            echo "Creating git release..."
            # Build json with tag + commit message
            curl_data='{"tag_name": "'$tag'", "target_commitish": "master", "name": "twitter-action-'$tag'", "body": "'$commit_message'", "draft": false, "prerelease": false}'
            # Sanity check (does json render through jq)
            echo "Data: $curl_data"
            echo "$curl_data" | jq '.'
            # Build, print and execute curl to create a new release with the github api 
            curl_post="curl -sXPOST -H \"Content-Type: application/json\" -H \"Authorization: token $GIT_TOKEN\" --data '$curl_data' https://api.github.com/repos/mathew-fleisch/twitter-action/releases"
            echo "curl: "
            echo "$curl_post"
            release_response="$(eval $curl_post)"
            echo "Release Response: $release_response"
            echo "$release_response" | jq '.'
            # If the release was created, the json response will contain an id
            release_id=$(echo "$release_resposne" | jq -r '.id')
            if [[ $release_id -gt 0 ]]; then
              # Add the go-binary, that was extracted from the docker build to the git release assets
              echo "Add go-binary to release: $tag"
              curl --data-binary @"$go_binary_filename" \
                -H "Authorization: token ${GIT_TOKEN}" \
                -H "Content-Type: application/octet-stream" \
                "https://uploads.github.com/repos/mathew-fleisch/twitter-action/releases/$release_id/assets?name=$(basename $go_binary_filename)"
              # Finally push the container to docker hub, after authenticating
              echo "Login to container registry"
              echo "$REGISTRY_PASSWORD" | docker login ${REGISTRY_URL} -u="$REGISTRY_USERNAME" --password-stdin
              docker tag twitter-action-local ${REGISTRY_URL}/${REGISTRY_APPNAME}:${tag}
              echo "Pushing docker container"
              docker push ${REGISTRY_URL}/${REGISTRY_APPNAME}:${tag}
              echo "Release complete: ${REGISTRY_URL}/${REGISTRY_APPNAME}:${tag}"
              exit 0
            else
              echo "Could not get release id from response. Skip upload and docker push."
              exit 1
            fi
          else
            echo "Go-binary was not found to release..."
            exit 1
          fi


